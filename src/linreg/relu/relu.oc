#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>
#include <math.h>
#include "linreg1.h"
#include "dbg.h"



void toObliv(protocolIO *io, obliv float *oa, float *a, int party) 
{
    for(int i = 0; i < io->n; i++) {
        oa[i] = feedOblivFloat(a[i], party);
    }
}

void check_input_count(protocolIO *io) 
{
    int nx = ocBroadcastInt(io->n, 1);
    int ny = ocBroadcastInt(io->n, 2);
    if (nx != ny) {
        log_err("Unequal amount of data points.\n\t"
                "X data points (party 1): %d\n\t"
                "Y data points (party 2): %d\n", nx, ny);
        clean_errno();	  
        exit(1);
    }
}

obliv float *relu(protocolIO *io,obliv float *ox_r, obliv float *or1, obliv float * or2,int n){
    obliv float * result=malloc(sizeof(obliv float)*n);
    obliv float *zero=malloc(sizeof(obliv float) * 1);
    float *const_zero=malloc(sizeof(float)*1);
    obliv float x=0;
    *const_zero=(float)0;
    toObliv(io, zero, const_zero, 1);
    float b;
    for(int i=0;i<n;i++){
        //第一部分首先消除r1
        x=ox_r[i]-or1[i];
       //第二部分relu
        obliv if(x<0){
            x=0;
        }
        result[i]=x;
        //revealOblivFloat(&b, x, 0);
        revealOblivFloat(&b, result[i], 0);
        printf("result[%d]:%f;",i,b);
        //第三部分加入随机噪声
        result[i]+=or2[i];
    }
    printf("\r\n");
    
    return result;
}

void relu_layer(void* args) 
{
    protocolIO *io = (protocolIO*) args;

    float *x_r = malloc(sizeof(float) * 3);
    float *r1 = malloc(sizeof(float) * 3);
    float *r2 = malloc(sizeof(float) * 3);
    //server 产生随机噪声r2
    for(int i=0;i<3;i++){
        r2[i]=i+1;
        printf("r2[%d]:%f;",r2[i]);
    }
    printf("\r\n");
    check_mem(x_r, r1, ocCurrentParty());

    // RESULTS
    float result = 0; 
    
    load_data(io, &x_r, &r1, ocCurrentParty());
    check_input_count(io);

    obliv float *ox_r = malloc(sizeof(obliv float) * 3);
    obliv float *or1 = malloc(sizeof(obliv float) * 3);
    obliv float *or2 = malloc(sizeof(obliv float) * 3);
    toObliv(io, ox_r, x_r, 1);
    toObliv(io, or1, r1, 2);
    toObliv(io, or2, r2, 2);
    free(x_r);
    free(r1);
    free(r2);
    obliv float * re=relu(io,ox_r,or1,or2,3);
    for(int i=0;i<3;i++){
        revealOblivFloat(&result,re[i], 0);
        printf("%f;",result);
    }
    
    free(ox_r);
    free(or1);
    free(or2);
}