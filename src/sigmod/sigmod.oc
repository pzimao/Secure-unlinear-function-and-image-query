#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>
#include <math.h>
#include "sigmod.h"
#include "dbg.h"
#include "../common/util.h"
#include <assert.h>
#include <time.h>
void toObliv(protocolIO *io, obliv float *oa, float *a, int party) 
{
    for(int i = 0; i < io->n; i++) {
        oa[i] = feedOblivFloat(a[i], party);
    }
}
void check_input_count(protocolIO *io) 
{
    int nx = ocBroadcastInt(io->n, 1);
    int ny = ocBroadcastInt(io->n, 2);
    if (nx != ny) {
        log_err("Unequal amount of data points.\n\t"
                "X data points (party 1): %d\n\t"
                "Y data points (party 2): %d\n", nx, ny);
        clean_errno();	  
        exit(1);
    }
}
obliv float *sigmod(protocolIO *io,obliv float *ox_r, obliv float *or1, obliv float * or2,int n){
    obliv float * result=malloc(sizeof(obliv float)*n);
    obliv float x=0;
    
    for(int i=0;i<n;i++){
        //第一部分首先消除r1
        x=ox_r[i]-or1[i];
       //第二部分sigmod
        obliv if(2*x>1){
            x=1;
        }else obliv if(2*x<-1){
            x=0;
        }else{
            x=2*x+1;
            x=x/2;
        }
        result[i]=x;
        //第三部分加入随机噪声
        result[i]+=or2[i];
    }
    printf("\r\n");
    return result;
}

void sigmod_layer(void* args) 
{   
    //数据点的个数
    int data_num=10000;
    protocolIO *io = (protocolIO*) args;
    float *x_r = malloc(sizeof(float) *data_num);
    float *r1 = malloc(sizeof(float) * data_num);
    float *r2 = malloc(sizeof(float) * data_num);

    //-----------server 产生随机噪声r2--------
    for(int i=0;i<data_num;i++){
        r2[i]=random()%10;
    }
    check_mem(x_r, r1, ocCurrentParty());

    // RESULTS
    float result = 0; 
    
    //--------------加载数据-----------------
    load_dataU(io, &x_r, &r1, ocCurrentParty());
    check_input_count(io);

    obliv float *ox_r = malloc(sizeof(obliv float) * data_num);
    obliv float *or1 = malloc(sizeof(obliv float) * data_num);
    obliv float *or2 = malloc(sizeof(obliv float) * data_num);
    toObliv(io, ox_r, x_r, 1);
    toObliv(io, or1, r1, 2);
    toObliv(io, or2, r2, 2);
   
   //---------------执行sigmod函数-------------
    lap = wallClock();
    obliv float * re=sigmod(io,ox_r,or1,or2,data_num);
    double runtime = wallClock() - lap; // stop clock here 
    printf("Total time: %lf seconds\n", runtime);
    printf("Yao Gate Count: %u\n", yaoGateCount());

    for(int i=0;i<data_num;i++){
        revealOblivFloat(&result,re[i], 0);
        //printf("%f;",result);
    }


    //需要将先x_r和r1传递给S1和S2
    //---------------首先得将float scale 1000----------
    //int *x_r_int = malloc(sizeof(int) * data_num);
    //int *r2_int = malloc(sizeof(int) * data_num);

    //for(int i=0;i<data_num;i++){
        //x_r_int[i]=(int)x_r[i]*1000;
        //printf("%d;",x_r_int[i]);
        //r2_int[i]=(int)r2[i]*1000;
    //}
    

    //--------------将噪声r2和x+r2分别传递给s1和s2-----
    char * src="sigmod1.txt";
    FILE * fp=fopen(src,"wb");;
    if(fp==NULL){
        printf("打开文件失败！");
    }
    for(int i=0;i<data_num;i++){
        fprintf(fp,"%d ",r2_int[i]);
    }
    char ch[]="\n";
    fprintf(fp,"%s",ch);
    for(int i=0;i<data_num;i++){
        fprintf(fp,"%d ",x_r_int[i]);
    }
    fclose(fp);
    
    //--------------释放内存-----------------
    free(x_r);
    free(r1);
    free(r2);
    free(ox_r);
    free(or1);
    free(or2);
}