#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>
#include <math.h>
#include "SecureSort.h"
#include "dbg.h"
#include <time.h>
#include <assert.h>
#include "../common/util.h"
#include "dbg.h"


void toObliv(protocolIO *io, obliv float *oa, float *a, int party) 
{
    for(int i = 0; i < io->n; i++) {
        oa[i] = feedOblivFloat(a[i], party);
    }
}

void check_input_count(protocolIO *io) 
{
    int nx = ocBroadcastInt(io->n, 1);
    int ny = ocBroadcastInt(io->n, 2);
    if (nx != ny) {
        log_err("Unequal amount of data points.\n\t"
                "X data points (party 1): %d\n\t"
                "Y data points (party 2): %d\n", nx, ny);
        clean_errno();	  
        exit(1);
    }
}


//   obliv versions quite easily
void batcherSwap(unsigned char* data,size_t n,size_t w,
                 void (*cmpswap)(void*,void*,void*),void* arg)
{
  size_t i;
  for(i=0;i+1<n;i+=2) cmpswap(data+w*i,data+w*(i+1),arg);
}
void batcherMerge(unsigned char* data,size_t n1,size_t n2,size_t w,
                  void (*cmpswap)(void*,void*,void*),void* arg)
{
  if(n1+n2<=1) return;
  int odd = n1%2;
  batcherMerge(data,(n1+1)/2,(n2+!odd)/2,w*2,cmpswap,arg);
  batcherMerge(data+w,n1/2,  (n2+odd)/2,  w*2,cmpswap,arg);
  batcherSwap(data+w*!odd,n1+n2-!odd,w,cmpswap,arg);
}

// w is width in bits
void batcherSort(void* data, size_t n,size_t w,
                 void (*cmpswap)(void*,void*,void*),void* arg)
{
  if(n<=1) return;
  batcherSort(data,n/2,w,cmpswap,arg);
  batcherSort((unsigned char*)data+w*(n/2),(n+1)/2,w,cmpswap,arg);
  batcherMerge(data,n/2,(n+1)/2,w,cmpswap,arg);
}

int intCompare(const void* a, const void* b) { return *(int*)a-*(int*)b; }


void swapInt(obliv int* a,obliv int* b) obliv
{
  ~obliv(en) {
    obliv int t = 0;
    obliv if(en) t=*a^*b;
    *a^=t;
    *b^=t;
  }
}
void cmpswapInt(void* va,void* vb,void* arg)
{
  obliv int *a=va,*b=vb;
  obliv if(*a>*b) swapInt(a,b);
}

void testSorter(void* args)
{

  int data_num=100;
  protocolIO *io = ( protocolIO*)args;
  int *x_r = malloc(sizeof(int) * data_num);
  int *r1 = malloc(sizeof(int) * data_num);
  int *r2 = malloc(sizeof(int) * data_num);

  srand((unsigned int)time(NULL));
    //-----------------server 产生随机噪声r2----------
  for(int i=0;i<data_num;i++){
    r2[i]=rand()%10;
  }
  printf("\r\n");
  check_mem(x_r, r1, ocCurrentParty());

    // RESULTS
  int result = 0; 
  load_dataInt(io, &x_r, &r1, ocCurrentParty());
  int *x = malloc(sizeof(int) * data_num);
    
  check_input_count(io);

  obliv int *ox_r = malloc(sizeof(obliv int) * data_num);
  obliv int *or1 = malloc(sizeof(obliv int) * data_num);
  obliv int *or2 = malloc(sizeof(obliv int) * data_num);
  toObliv(io, ox_r, x_r, 1);
  toObliv(io, or1, r1, 2);
  toObliv(io, or2, r2, 2);
  
  int i;
  srand((unsigned) (time(NULL)));
  
  obliv int arr[data_num];
  for(int i=0;i<data_num;i++){
      arr[i]=ox_r[i]-or1[i];
  }
  lap = wallClock();
  batcherSort(arr,data_num,sizeof(obliv int),cmpswapInt,NULL);
  double runtime = wallClock() - lap;
  printf("Total time: %lf seconds\n", runtime);
  printf("Yao Gate Count: %u\n", yaoGateCount()); 
    //-----------------加载数据-------------
  
  //for(i=1;i<SIZE;++i) res = (res & (arr[i-1]<=arr[i]));
  //revealOblivBool(&testSorterResult,res,0);
  //releaseBCipherRandomGen(gen);
}

