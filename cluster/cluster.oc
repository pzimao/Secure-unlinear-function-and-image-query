#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>
#include <math.h>
#include "relu.h"
#include "dbg.h"
#include <time.h>



void toObliv(protocolIO *io, obliv float *oa, float *a, int party) 
{
    for(int i = 0; i < io->n; i++) {
        oa[i] = feedOblivFloat(a[i], party);
    }
}

void check_input_count(protocolIO *io) 
{
    int nx = ocBroadcastInt(io->n, 1);
    int ny = ocBroadcastInt(io->n, 2);
    if (nx != ny) {
        log_err("Unequal amount of data points.\n\t"
                "X data points (party 1): %d\n\t"
                "Y data points (party 2): %d\n", nx, ny);
        clean_errno();	  
        exit(1);
    }
}


obliv int MaxIndex(obliv * float arr_x_r, obliv * float arr_r, int len){
	//最大值下标
	obliv int max_idx = 0;
	for(int i=0;i<len;i++) {
		if(arr_x_r[i]-arr_r[i]>arr_x_r[max_idx]-arr_r[max_idx]) {
			max_idx = i;
		}
    return max_idx;
}

void cluster(void* args) 
{
    int data_num=10;
    protocolIO *io = ( protocolIO*)args;
    float *x_r = malloc(sizeof(float) * data_num);
    float *r1 = malloc(sizeof(float) * data_num);
    float *r2 = malloc(sizeof(float) * data_num);

    srand((unsigned int)time(NULL));
    //-----------------server 产生随机噪声r2----------
    for(int i=0;i<data_num;i++){
        r2[i]=rand()%10;
    }
    check_mem(x_r, r1, ocCurrentParty());

    //-----------------加载数据-------------
    load_dataU(io, &x_r, &r1, ocCurrentParty());
    
    check_input_count(io);

    obliv float *ox_r = malloc(sizeof(obliv float) * data_num);
    obliv float *or1 = malloc(sizeof(obliv float) * data_num);
    obliv float *or2 = malloc(sizeof(obliv float) * data_num);
    toObliv(io, ox_r, x_r, 1);
    toObliv(io, or1, r1, 2);
    toObliv(io, or2, r2, 2);
   
   //-----------------执行relu---------------
    obliv int index=MaxIndex(ox_r,or1,data_num);

    //------------释放内存-----------------
    free(x_r);
    free(r1);
    free(r2);
    free(x);
    free(ox_r);
    free(or1);
    free(or2);
}
